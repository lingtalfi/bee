Syntaxe
====================
2015-06-30



Le but est d'avoir une syntaxe fonctionnellement équivalente à celle utilisée
dans le fichier sql.g.txt (ANTLR en java).


On devrait prévoir que mon objet pourrait s'étendre en fc, mais je ne vise 
que le "syntax directed parser", donc un simple parser drivé par un interpreter
que l'on peut contrôler via la syntaxe.




- Grammaire: un ensemble de règles utilisées 
                par BeeOneLinerParserGenerator (bolpg) pour construire un one liner parser
- keyword:

    
    https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Getting+Started+with+ANTLR+v4
    // Define a grammar called Hello
    grammar Hello;
    r  : 'hello' ID ;         // match keyword hello followed by an identifier
    ID : [a-z]+ ;             // match lower-case identifiers
    WS : [ \t\r\n]+ -> skip ; // skip spaces, tabs, newlines




Identifiers:
    https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Grammar+Lexicon
    Token names always start with a capital letter and so do lexer rules.
    Parser rule names always start with a lowercase letter.    

    ID, LPAREN, RIGHT_CURLY // token names/rules
    expr, simpleDeclarator, d2, header_file // rule names
    
    
    Certains caractères spéciaux:
    Par défaut, si on utilise la regex: !a-z!, elle ne matchera pas le caractère é par exemple.
    La regex qui matche toutes les lettres (au sens unicode) est en php: !\P{L}!u
    On peut avoir des règles natives qui permettent de spécifier des plages de caractères,
    cela est plus digeste que d'écrire la regex !\P{L}!u par exemple.
    On pourrait par exemple avoir une règle:
    
            CharNames: !\P{L}!u
            à voir...
            
                
Literals:

    All literal strings one or more characters in length are enclosed in single quotes 
    such as ';', 'if', '>=', and '\'' (refers to the one-character string containing the single quote character). 
    Literals never contain regular expressions.
    Literals can contain Unicode escape sequences of the form \uXXXX, where XXXX is the hexadecimal 
    Unicode character value. For example, '\u00E8' is the French letter with a grave accent: 'è'.
    ANTLR also understands the usual special escape sequences: '\n' (newline), '\r' (carriage return), 
    '\t' (tab), '\b' (backspace), and '\f' (form feed).
     You can use Unicode characters directly within literals or use the Unicode escape sequences.
          
          
          
Actions

    Actions are code blocks written in the target language. 
          
          
Grammar Imports
          
          
Rule Elements          
https://theantlrguy.atlassian.net/wiki/display/ANTLR4/Parser+Rules

    T 
        Match token T at the current input position. Tokens always begin with a capital letter.
    ’literal’ 
        Match the string literal at the current input position. A string literal is simply a token with a fixed string.
    r
        Match rule r at current input position, which amounts to invoking the rule just like a function call. Parser rule names always begin with a lowercase letter.
    r [«args»] 
        Match rule r at current input position, passing in a list of arguments just like a function call. The arguments inside the square brackets are in the syntax of the target language and are usually a comma-separated list of expressions.
    {«action»} 
        Execute an action immediately after the preceding alternative element and immediately before the following alternative element. The action conforms to the syntax of the target language. ANTLR copies the action code to the generated class verbatim, except for substituting attribute and token references such as $x and $x.y.
    {«p»}? 
        Evaluate semantic predicate «p». Do not continue parsing past a predicate if «p» evaluates to false at runtime. Predicates encountered during prediction, when ANTLR distinguishes between alternatives, enable or disable the alternative(s) surrounding the predicate(s).
    .
        Match any single token except for the end of file token. The “dot” operator is called the wildcard.          
        
        
        
        
        
The definitive ANTLR 4 Reference        
--------------------------------------
        
STRING : '"' ('""'|~'"')* '"' ; // quote-quote is an escaped quote  p85
COMMENT : '#' ~[\r\n]* '\r'? '\n' -> skip ;   p279
DQUOTED_STRING : '"' ('\"'|~'"')* '"' ; // double quoted string? too slow?


lexer grammar Recur;    p280
ACTION : '{' ( ACTION | ~[{}] )* '}' ;
   WS     : [ \r\t\n]+ -> skip ;        
        
        
        