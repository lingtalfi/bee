Brainstorm
======================
2015-05-16





Dans ce document, je vais essayer de définir des outils que nous pourrons utiliser pour créer une notation.


Une notation est une manière d'écrire des actions sous forme d'alias.
L'intérêt est que l'utilisateur de la notation a à sa disposition une interface intuitive lui permettant 
d'accéder aux couches profondes du programme proposant la notation.




Nomenclature
-----------------

Voici la nomenclature que nous utiliserons.

Une notation propose à l'utilisateur des expressions.





Création de la notation
---------------------------

Voici quelques problèmes auxquels nous allons être confrontés.


    Créer les expressions
    -----------------------------
    
    Une des premières choses à faire est de trouver les expressions de notre notation.
    Les expressions peuvent tout à fait se mélanger à du texte normal,
    un premier problème sera de trouver des expressions qui ne se distinguent des mots normaux,
    tout en restant intuitives pour l'utilisateur.
    
    Par exemple si je dis que mon expression est a, et qu'elle exécute une action A1.
    Si l'utilisateur écrit:
     
            bonjour ça va ?
            
    Il aurait exécuté deux fois l'action A1 ?
    
    
    En général, on utilisera des symboles qu'on n'utilise pas souvent dans des phrases normales.
    Par exemple, $, &, #, @, §, !, ...
    
    
    On peut anticiper un peu et voir différents types de notation d'expression:
    
        - expressions qui utilisent un préfixe:
                    
                    - $myVar
                    - @myVar
                    
        - expressions qui utilisent un symbole de début et de fin:
                    
                    - §parameter.fruit§
                    - <action.one>
                    
        - expressions qui contiennent d'autres expressions:
                    
                    - @method->( $myVar, $myVar2, §param.one§ )
                    - @method->( $myVar, $myVar2, @method->( @chosenFruit ), §param.one§ )
    
    
    Les expressions qui contiennent d'autres expressions, nous les appelons container.
        
        
    Ordre de parsage des expressions
    -----------------------------------

    Du fait que les containers contiennent d'autres expressions, il faut faire attention à les parser AVANT
    les expressions de type non container.
    Pourquoi ?
    Une des raisons est la suivante:
    
        - encore une fois, une expression peut se mélanger à du texte normal, par exemple:
            
                - Bonjour, j'aime bien @implode->( ", ", §fruits.list§ )
    
                Imaginons que dans cet exemple, §fruits.list§ soit une référence à un array
    
    
    
                
                
    


